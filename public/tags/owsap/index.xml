<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>owsap on Chaotic Solutions</title>
    <link>http://kurobeats.github.io/tags/owsap/</link>
    <description>Recent content in owsap on Chaotic Solutions</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Anthony Cozamanis (CC BY 4.0)</copyright>
    <lastBuildDate>Sat, 13 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="http://kurobeats.github.io/tags/owsap/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Android Testing Proxy Setup</title>
      <link>http://kurobeats.github.io/posts/android-testing-proxy-setup/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      
      <guid>http://kurobeats.github.io/posts/android-testing-proxy-setup/</guid>
      <description>Note: Setup the Android device like normal in Android studio. Get the device ID:
cd ${ANDROID_SDK}/tools/emulator ./emulator -list-avds The ID will look like Nexus_6_API_26
Setup TLS Export the CA from either Burp or ZAP (which ever you will be using) and rename to an Android friendly format, the cert hash plus string &amp;ldquo;.0&amp;rdquo;
Burp cp ca.der $(openssl x509 -inform DER -subject_hash_old -in ca.der | head -n 1)&amp;#34;.0&amp;#34; ZAP cp owasp_zap_root_ca.cer $(openssl x509 -inform PEM -subject_hash_old -in owasp_zap_root_ca.</description>
    </item>
    
    <item>
      <title>Determining the Number of Columns Returned by a Query Using SQLi</title>
      <link>http://kurobeats.github.io/posts/determining-the-number-of-columns-returned-by-a-query-using-sqli/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      
      <guid>http://kurobeats.github.io/posts/determining-the-number-of-columns-returned-by-a-query-using-sqli/</guid>
      <description>Note: This was part of an overall effort to complete PortSwigger&amp;rsquo;s Web Security Academy without Burp Suite.
If we take the URL https://ac741fd61fc83ed980cb8ea0000c000a.web-security-academy.net/filter?category=Accessories it can be seen that the category parameter is being used. Nothing new there. Let&amp;rsquo;s see if when we give it something unexpected, it throws an error/s. Something like &#39;+UNION+SELECT+NULL-- at the end, like so:
https://ac741fd61fc83ed980cb8ea0000c000a.web-security-academy.net/filter?category=Accessories&#39;+UNION+SELECT+NULL--
Ok, something bad is happening, I got the following when I send a GET request to that URL:</description>
    </item>
    
    <item>
      <title>Exploiting Cross-Site Scripting to Capture Passwords With OWASP ZAP</title>
      <link>http://kurobeats.github.io/posts/exploiting-cross-site-scripting-to-capture-passwords-with-owasp-zap/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      
      <guid>http://kurobeats.github.io/posts/exploiting-cross-site-scripting-to-capture-passwords-with-owasp-zap/</guid>
      <description>WackoPicko is a website that includes common vulnerabilities, including a stored XSS vulnerability in its blog comment feature. This vulnerability can be exploited to retrieve a victim&amp;rsquo;s username and password and subsequently gain access to their account by utilising OWASP ZAP.
Access your remote C2 server via SSH and modify /etc/ssh/sshd_config so the following are enabled: AllowTcpForwarding yes GatewayPorts yes Restart sshd with systemd: sudo systemctl restart ssh From your attacking machine, create a tunnel via SSH from the remote server so that anything that hits port 38193 will be redirected to the attacker&amp;rsquo;s instance of ZAP ssh -N -R 38193:localhost:38193 user@attacker.</description>
    </item>
    
    <item>
      <title>Exploiting Cross-Site Scripting to Steal Cookies with OWASP ZAP</title>
      <link>http://kurobeats.github.io/posts/exploiting-cross-site-scripting-to-steal-cookies-with-owasp-zap/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      
      <guid>http://kurobeats.github.io/posts/exploiting-cross-site-scripting-to-steal-cookies-with-owasp-zap/</guid>
      <description>Using cross-site scripting (XSS) to steal cookies is a common method of exploitation as cookies are widely used by web applications for session management. With some XSS vulnerabilities, an attacker can forward the victim&amp;rsquo;s cookies to their own domain, manually insert them into their browser, and assume the victim&amp;rsquo;s identity.
However, there are several limitations to this approach in practice, including the possibility that the victim is not logged in, that cookies are hidden from JavaScript using the HttpOnly flag, that sessions are locked to additional factors such as the user&amp;rsquo;s IP address, and that the session might time out before it can be hijacked.</description>
    </item>
    
    <item>
      <title>User Enumeration and Bruteforcing With OWASP ZAP</title>
      <link>http://kurobeats.github.io/posts/user-enumeration-and-bruteforcing-with-zap/</link>
      <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
      
      <guid>http://kurobeats.github.io/posts/user-enumeration-and-bruteforcing-with-zap/</guid>
      <description>So, you&amp;rsquo;ve been told to (legally) break into a WordPress website. Where to start? You can&amp;rsquo;t go wrong investing a bit of time trying to break into legitmate user accounts. Here&amp;rsquo;s how you can do that with ZAP.
Target website: https://192.168.122.34
There&amp;rsquo;s a few way to enumerate users on a WordPess blog and wpscan does these easily. We&amp;rsquo;ll be taking a slight different approach and target the password reset page (https://192.</description>
    </item>
    
  </channel>
</rss>
